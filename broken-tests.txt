Small-ish broken tests as of 2017-01-29

// yay fixed! but wtf it doesn't print out "abc" when there's a const
python run_cpp_backend.py 'int main() {
  const char* x = "abc";
}' c

// ergh, can't seem to find 'x' in globals table, even though it's
// supposedly a 'global'. so now instead of crashing, i just don't
// display those variables; it's still not fixed, but at least the code
// doesn't straight-up crash with an error
python run_cpp_backend.py 'int y = 42;
int main() {
  static int x = 0;
}' c

// TODO: investigate this
static int x = 0;
int main() {
  static int x = 0;
  int y = 0;
}

python run_cpp_backend.py 'int main() {
  unknownFunc();
}' c

python run_cpp_backend.py 'int main() {
      int a[3][2] = {{1,2}, {2,3}, {3,4}};
}' c

python run_cpp_backend.py 'int main() {
  char *src = "string with\200inside !";
}' c

python run_cpp_backend.py 'void* sortedArrayPositionsChange(int *Arr, int len) {
    int i = 0, j = len - 1, t;
    if (len <= 0)
        return 0;
    else {
        for (i = len - 1; i > 0; i--) {
            if (Arr[i] < Arr[i - 1]) {
                j = i - 1;
                while (j >= 0 && Arr[i] < Arr[j])
                    j--;
                t = Arr[i];
                Arr[i] = Arr[j];
                Arr[j] = t; // <-- this seems to be the line that BREAKS things
                break;
            }
        }
    }
}

int main() {
    int Arr[5] = { 50, 20, 30, 40, 10 };
    sortedArrayPositionsChange(Arr, 5);
    return 0;
}' c

python run_cpp_backend.py "int main() {
  char str[]=\"he ll o\";
    for (int i = 0; str[i] != '\0'; i++) {
        if (str[i] == ' ') {
            for (int j = i; str[j] != '\0'; j++) {
                str[j] = str[j + 1];
                str[j + 1] = ' '; // <-- this line breaks everything! wtf?
            }
        }
    }
}" c

python run_cpp_backend.py 'int mian() {
}' c

// void* has issues
python run_cpp_backend.py 'void* foo() {
  void *x = malloc(1);
  return x;
} // allocated memory disappears from the heap here

int main() {
  void *x = foo(); // memory reappears here
  free(x);
}' c
